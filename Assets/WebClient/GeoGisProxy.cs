//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8825
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by Web Services Description Language Utility
//Mono Framework v2.0.50727.8825
//


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="ServiceSoap", Namespace="http://tempuri.org/")]
public partial class Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback GetDBListOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetDSOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetDS2OperationCompleted;
    
    private System.Threading.SendOrPostCallback PutDSOperationCompleted;
    
    private System.Threading.SendOrPostCallback PutDS2OperationCompleted;
    
    private System.Threading.SendOrPostCallback PutAndGetDSOperationCompleted;
    
    private System.Threading.SendOrPostCallback ExecuteSQLOperationCompleted;
    
    private System.Threading.SendOrPostCallback ExecuteSQL2OperationCompleted;
    
    private System.Threading.SendOrPostCallback GetValOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetVal2OperationCompleted;
    
    private System.Threading.SendOrPostCallback DirectoryExistsOperationCompleted;
    
    private System.Threading.SendOrPostCallback FileExistsOperationCompleted;
    
    private System.Threading.SendOrPostCallback BrowseOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetFileOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetBaseUrlOperationCompleted;
    
    private System.Threading.SendOrPostCallback CreateFolderOperationCompleted;
    
    private System.Threading.SendOrPostCallback UploadFileOperationCompleted;
    
    private System.Threading.SendOrPostCallback StartUploadOperationCompleted;
    
    private System.Threading.SendOrPostCallback UploadDataOperationCompleted;
    
    private System.Threading.SendOrPostCallback StartDownloadOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetExtensionsOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetFileNameOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetFileSizeOperationCompleted;
    
    private System.Threading.SendOrPostCallback DownloadDataOperationCompleted;
    
    private System.Threading.SendOrPostCallback AbortTransferOperationCompleted;
    
    private System.Threading.SendOrPostCallback CheckVersion_ServiceOperationCompleted;
    
    private System.Threading.SendOrPostCallback SetLicenseInfo_ServiceOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetLicenseNo_ServiceOperationCompleted;
    
    private System.Threading.SendOrPostCallback OpenDotNetNukeOperationCompleted;
    
    private System.Threading.SendOrPostCallback IsNetworkLicenseOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetLicenseFromPoolOperationCompleted;
    
    private System.Threading.SendOrPostCallback PutLicenseToPoolOperationCompleted;
    
    private System.Threading.SendOrPostCallback LoggingServiceOperationCompleted;
    
    /// <remarks/>
    public Service() {
        this.Url = "http://geogis.rsyd.dk/service.asmx";
    }

    public Service(string url)
    {
        this.Url = url;
    }

    /// <remarks/>
    public event GetDBListCompletedEventHandler GetDBListCompleted;
    
    /// <remarks/>
    public event GetDSCompletedEventHandler GetDSCompleted;
    
    /// <remarks/>
    public event GetDS2CompletedEventHandler GetDS2Completed;
    
    /// <remarks/>
    public event PutDSCompletedEventHandler PutDSCompleted;
    
    /// <remarks/>
    public event PutDS2CompletedEventHandler PutDS2Completed;
    
    /// <remarks/>
    public event PutAndGetDSCompletedEventHandler PutAndGetDSCompleted;
    
    /// <remarks/>
    public event ExecuteSQLCompletedEventHandler ExecuteSQLCompleted;
    
    /// <remarks/>
    public event ExecuteSQL2CompletedEventHandler ExecuteSQL2Completed;
    
    /// <remarks/>
    public event GetValCompletedEventHandler GetValCompleted;
    
    /// <remarks/>
    public event GetVal2CompletedEventHandler GetVal2Completed;
    
    /// <remarks/>
    public event DirectoryExistsCompletedEventHandler DirectoryExistsCompleted;
    
    /// <remarks/>
    public event FileExistsCompletedEventHandler FileExistsCompleted;
    
    /// <remarks/>
    public event BrowseCompletedEventHandler BrowseCompleted;
    
    /// <remarks/>
    public event GetFileCompletedEventHandler GetFileCompleted;
    
    /// <remarks/>
    public event GetBaseUrlCompletedEventHandler GetBaseUrlCompleted;
    
    /// <remarks/>
    public event CreateFolderCompletedEventHandler CreateFolderCompleted;
    
    /// <remarks/>
    public event UploadFileCompletedEventHandler UploadFileCompleted;
    
    /// <remarks/>
    public event StartUploadCompletedEventHandler StartUploadCompleted;
    
    /// <remarks/>
    public event UploadDataCompletedEventHandler UploadDataCompleted;
    
    /// <remarks/>
    public event StartDownloadCompletedEventHandler StartDownloadCompleted;
    
    /// <remarks/>
    public event GetExtensionsCompletedEventHandler GetExtensionsCompleted;
    
    /// <remarks/>
    public event GetFileNameCompletedEventHandler GetFileNameCompleted;
    
    /// <remarks/>
    public event GetFileSizeCompletedEventHandler GetFileSizeCompleted;
    
    /// <remarks/>
    public event DownloadDataCompletedEventHandler DownloadDataCompleted;
    
    /// <remarks/>
    public event AbortTransferCompletedEventHandler AbortTransferCompleted;
    
    /// <remarks/>
    public event CheckVersion_ServiceCompletedEventHandler CheckVersion_ServiceCompleted;
    
    /// <remarks/>
    public event SetLicenseInfo_ServiceCompletedEventHandler SetLicenseInfo_ServiceCompleted;
    
    /// <remarks/>
    public event GetLicenseNo_ServiceCompletedEventHandler GetLicenseNo_ServiceCompleted;
    
    /// <remarks/>
    public event OpenDotNetNukeCompletedEventHandler OpenDotNetNukeCompleted;
    
    /// <remarks/>
    public event IsNetworkLicenseCompletedEventHandler IsNetworkLicenseCompleted;
    
    /// <remarks/>
    public event GetLicenseFromPoolCompletedEventHandler GetLicenseFromPoolCompleted;
    
    /// <remarks/>
    public event PutLicenseToPoolCompletedEventHandler PutLicenseToPoolCompleted;
    
    /// <remarks/>
    public event LoggingServiceCompletedEventHandler LoggingServiceCompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDBList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Data.DataSet GetDBList() {
        object[] results = this.Invoke("GetDBList", new object[0]);
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public void GetDBListAsync() {
        this.GetDBListAsync(null);
    }
    
    /// <remarks/>
    public void GetDBListAsync(object userState) {
        if ((this.GetDBListOperationCompleted == null)) {
            this.GetDBListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDBListOperationCompleted);
        }
        this.InvokeAsync("GetDBList", new object[0], this.GetDBListOperationCompleted, userState);
    }
    
    private void OnGetDBListOperationCompleted(object arg) {
        if ((this.GetDBListCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetDBListCompleted(this, new GetDBListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDS", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Data.DataSet GetDS(string DBName, string Username, string Password, string SQLSelect, ref string ErrMessage) {
        object[] results = this.Invoke("GetDS", new object[] {
                    DBName,
                    Username,
                    Password,
                    SQLSelect,
                    ErrMessage});
        ErrMessage = ((string)(results[1]));
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public void GetDSAsync(string DBName, string Username, string Password, string SQLSelect, string ErrMessage) {
        this.GetDSAsync(DBName, Username, Password, SQLSelect, ErrMessage, null);
    }
    
    /// <remarks/>
    public void GetDSAsync(string DBName, string Username, string Password, string SQLSelect, string ErrMessage, object userState) {
        if ((this.GetDSOperationCompleted == null)) {
            this.GetDSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDSOperationCompleted);
        }
        this.InvokeAsync("GetDS", new object[] {
                    DBName,
                    Username,
                    Password,
                    SQLSelect,
                    ErrMessage}, this.GetDSOperationCompleted, userState);
    }
    
    private void OnGetDSOperationCompleted(object arg) {
        if ((this.GetDSCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetDSCompleted(this, new GetDSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDS2", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Data.DataSet GetDS2(string DBName, string Username, string Password, string UserId, string SQLSelect, ref string ErrMessage) {
        object[] results = this.Invoke("GetDS2", new object[] {
                    DBName,
                    Username,
                    Password,
                    UserId,
                    SQLSelect,
                    ErrMessage});
        ErrMessage = ((string)(results[1]));
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public void GetDS2Async(string DBName, string Username, string Password, string UserId, string SQLSelect, string ErrMessage) {
        this.GetDS2Async(DBName, Username, Password, UserId, SQLSelect, ErrMessage, null);
    }
    
    /// <remarks/>
    public void GetDS2Async(string DBName, string Username, string Password, string UserId, string SQLSelect, string ErrMessage, object userState) {
        if ((this.GetDS2OperationCompleted == null)) {
            this.GetDS2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDS2OperationCompleted);
        }
        this.InvokeAsync("GetDS2", new object[] {
                    DBName,
                    Username,
                    Password,
                    UserId,
                    SQLSelect,
                    ErrMessage}, this.GetDS2OperationCompleted, userState);
    }
    
    private void OnGetDS2OperationCompleted(object arg) {
        if ((this.GetDS2Completed != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetDS2Completed(this, new GetDS2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PutDS", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool PutDS(string DBName, string Username, string Password, System.Data.DataSet DS, string SQLSelect, ref string ErrMessage, ref int[] ReturnIdentity) {
        object[] results = this.Invoke("PutDS", new object[] {
                    DBName,
                    Username,
                    Password,
                    DS,
                    SQLSelect,
                    ErrMessage,
                    ReturnIdentity});
        ErrMessage = ((string)(results[1]));
        ReturnIdentity = ((int[])(results[2]));
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void PutDSAsync(string DBName, string Username, string Password, System.Data.DataSet DS, string SQLSelect, string ErrMessage, int[] ReturnIdentity) {
        this.PutDSAsync(DBName, Username, Password, DS, SQLSelect, ErrMessage, ReturnIdentity, null);
    }
    
    /// <remarks/>
    public void PutDSAsync(string DBName, string Username, string Password, System.Data.DataSet DS, string SQLSelect, string ErrMessage, int[] ReturnIdentity, object userState) {
        if ((this.PutDSOperationCompleted == null)) {
            this.PutDSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPutDSOperationCompleted);
        }
        this.InvokeAsync("PutDS", new object[] {
                    DBName,
                    Username,
                    Password,
                    DS,
                    SQLSelect,
                    ErrMessage,
                    ReturnIdentity}, this.PutDSOperationCompleted, userState);
    }
    
    private void OnPutDSOperationCompleted(object arg) {
        if ((this.PutDSCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.PutDSCompleted(this, new PutDSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PutDS2", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool PutDS2(string DBName, string Username, string Password, string UserId, System.Data.DataSet DS, string SQLSelect, ref string ErrMessage, ref int[] ReturnIdentity) {
        object[] results = this.Invoke("PutDS2", new object[] {
                    DBName,
                    Username,
                    Password,
                    UserId,
                    DS,
                    SQLSelect,
                    ErrMessage,
                    ReturnIdentity});
        ErrMessage = ((string)(results[1]));
        ReturnIdentity = ((int[])(results[2]));
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void PutDS2Async(string DBName, string Username, string Password, string UserId, System.Data.DataSet DS, string SQLSelect, string ErrMessage, int[] ReturnIdentity) {
        this.PutDS2Async(DBName, Username, Password, UserId, DS, SQLSelect, ErrMessage, ReturnIdentity, null);
    }
    
    /// <remarks/>
    public void PutDS2Async(string DBName, string Username, string Password, string UserId, System.Data.DataSet DS, string SQLSelect, string ErrMessage, int[] ReturnIdentity, object userState) {
        if ((this.PutDS2OperationCompleted == null)) {
            this.PutDS2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnPutDS2OperationCompleted);
        }
        this.InvokeAsync("PutDS2", new object[] {
                    DBName,
                    Username,
                    Password,
                    UserId,
                    DS,
                    SQLSelect,
                    ErrMessage,
                    ReturnIdentity}, this.PutDS2OperationCompleted, userState);
    }
    
    private void OnPutDS2OperationCompleted(object arg) {
        if ((this.PutDS2Completed != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.PutDS2Completed(this, new PutDS2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PutAndGetDS", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Data.DataSet PutAndGetDS(string DBName, string Username, string Password, System.Data.DataSet DS, string SQLSelect, ref string ErrMessage) {
        object[] results = this.Invoke("PutAndGetDS", new object[] {
                    DBName,
                    Username,
                    Password,
                    DS,
                    SQLSelect,
                    ErrMessage});
        ErrMessage = ((string)(results[1]));
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public void PutAndGetDSAsync(string DBName, string Username, string Password, System.Data.DataSet DS, string SQLSelect, string ErrMessage) {
        this.PutAndGetDSAsync(DBName, Username, Password, DS, SQLSelect, ErrMessage, null);
    }
    
    /// <remarks/>
    public void PutAndGetDSAsync(string DBName, string Username, string Password, System.Data.DataSet DS, string SQLSelect, string ErrMessage, object userState) {
        if ((this.PutAndGetDSOperationCompleted == null)) {
            this.PutAndGetDSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPutAndGetDSOperationCompleted);
        }
        this.InvokeAsync("PutAndGetDS", new object[] {
                    DBName,
                    Username,
                    Password,
                    DS,
                    SQLSelect,
                    ErrMessage}, this.PutAndGetDSOperationCompleted, userState);
    }
    
    private void OnPutAndGetDSOperationCompleted(object arg) {
        if ((this.PutAndGetDSCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.PutAndGetDSCompleted(this, new PutAndGetDSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteSQL", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public object ExecuteSQL(string DBName, string Username, string Password, string SQLString, ref string ErrMessage) {
        object[] results = this.Invoke("ExecuteSQL", new object[] {
                    DBName,
                    Username,
                    Password,
                    SQLString,
                    ErrMessage});
        ErrMessage = ((string)(results[1]));
        return ((object)(results[0]));
    }
    
    /// <remarks/>
    public void ExecuteSQLAsync(string DBName, string Username, string Password, string SQLString, string ErrMessage) {
        this.ExecuteSQLAsync(DBName, Username, Password, SQLString, ErrMessage, null);
    }
    
    /// <remarks/>
    public void ExecuteSQLAsync(string DBName, string Username, string Password, string SQLString, string ErrMessage, object userState) {
        if ((this.ExecuteSQLOperationCompleted == null)) {
            this.ExecuteSQLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteSQLOperationCompleted);
        }
        this.InvokeAsync("ExecuteSQL", new object[] {
                    DBName,
                    Username,
                    Password,
                    SQLString,
                    ErrMessage}, this.ExecuteSQLOperationCompleted, userState);
    }
    
    private void OnExecuteSQLOperationCompleted(object arg) {
        if ((this.ExecuteSQLCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ExecuteSQLCompleted(this, new ExecuteSQLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteSQL2", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public object ExecuteSQL2(string DBName, string Username, string Password, string UserId, string SQLString, ref string ErrMessage) {
        object[] results = this.Invoke("ExecuteSQL2", new object[] {
                    DBName,
                    Username,
                    Password,
                    UserId,
                    SQLString,
                    ErrMessage});
        ErrMessage = ((string)(results[1]));
        return ((object)(results[0]));
    }
    
    /// <remarks/>
    public void ExecuteSQL2Async(string DBName, string Username, string Password, string UserId, string SQLString, string ErrMessage) {
        this.ExecuteSQL2Async(DBName, Username, Password, UserId, SQLString, ErrMessage, null);
    }
    
    /// <remarks/>
    public void ExecuteSQL2Async(string DBName, string Username, string Password, string UserId, string SQLString, string ErrMessage, object userState) {
        if ((this.ExecuteSQL2OperationCompleted == null)) {
            this.ExecuteSQL2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteSQL2OperationCompleted);
        }
        this.InvokeAsync("ExecuteSQL2", new object[] {
                    DBName,
                    Username,
                    Password,
                    UserId,
                    SQLString,
                    ErrMessage}, this.ExecuteSQL2OperationCompleted, userState);
    }
    
    private void OnExecuteSQL2OperationCompleted(object arg) {
        if ((this.ExecuteSQL2Completed != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ExecuteSQL2Completed(this, new ExecuteSQL2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetVal", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public object GetVal(string DBName, string Username, string Password, string SQLSelect, ref string ErrMessage) {
        object[] results = this.Invoke("GetVal", new object[] {
                    DBName,
                    Username,
                    Password,
                    SQLSelect,
                    ErrMessage});
        ErrMessage = ((string)(results[1]));
        return ((object)(results[0]));
    }
    
    /// <remarks/>
    public void GetValAsync(string DBName, string Username, string Password, string SQLSelect, string ErrMessage) {
        this.GetValAsync(DBName, Username, Password, SQLSelect, ErrMessage, null);
    }
    
    /// <remarks/>
    public void GetValAsync(string DBName, string Username, string Password, string SQLSelect, string ErrMessage, object userState) {
        if ((this.GetValOperationCompleted == null)) {
            this.GetValOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetValOperationCompleted);
        }
        this.InvokeAsync("GetVal", new object[] {
                    DBName,
                    Username,
                    Password,
                    SQLSelect,
                    ErrMessage}, this.GetValOperationCompleted, userState);
    }
    
    private void OnGetValOperationCompleted(object arg) {
        if ((this.GetValCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetValCompleted(this, new GetValCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetVal2", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public object GetVal2(string DBName, string Username, string Password, string UserId, string SQLSelect, ref string ErrMessage) {
        object[] results = this.Invoke("GetVal2", new object[] {
                    DBName,
                    Username,
                    Password,
                    UserId,
                    SQLSelect,
                    ErrMessage});
        ErrMessage = ((string)(results[1]));
        return ((object)(results[0]));
    }
    
    /// <remarks/>
    public void GetVal2Async(string DBName, string Username, string Password, string UserId, string SQLSelect, string ErrMessage) {
        this.GetVal2Async(DBName, Username, Password, UserId, SQLSelect, ErrMessage, null);
    }
    
    /// <remarks/>
    public void GetVal2Async(string DBName, string Username, string Password, string UserId, string SQLSelect, string ErrMessage, object userState) {
        if ((this.GetVal2OperationCompleted == null)) {
            this.GetVal2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVal2OperationCompleted);
        }
        this.InvokeAsync("GetVal2", new object[] {
                    DBName,
                    Username,
                    Password,
                    UserId,
                    SQLSelect,
                    ErrMessage}, this.GetVal2OperationCompleted, userState);
    }
    
    private void OnGetVal2OperationCompleted(object arg) {
        if ((this.GetVal2Completed != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetVal2Completed(this, new GetVal2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DirectoryExists", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool DirectoryExists(string Path) {
        object[] results = this.Invoke("DirectoryExists", new object[] {
                    Path});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void DirectoryExistsAsync(string Path) {
        this.DirectoryExistsAsync(Path, null);
    }
    
    /// <remarks/>
    public void DirectoryExistsAsync(string Path, object userState) {
        if ((this.DirectoryExistsOperationCompleted == null)) {
            this.DirectoryExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDirectoryExistsOperationCompleted);
        }
        this.InvokeAsync("DirectoryExists", new object[] {
                    Path}, this.DirectoryExistsOperationCompleted, userState);
    }
    
    private void OnDirectoryExistsOperationCompleted(object arg) {
        if ((this.DirectoryExistsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DirectoryExistsCompleted(this, new DirectoryExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FileExists", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public bool FileExists(string Path, string FileName) {
        object[] results = this.Invoke("FileExists", new object[] {
                    Path,
                    FileName});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public void FileExistsAsync(string Path, string FileName) {
        this.FileExistsAsync(Path, FileName, null);
    }
    
    /// <remarks/>
    public void FileExistsAsync(string Path, string FileName, object userState) {
        if ((this.FileExistsOperationCompleted == null)) {
            this.FileExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFileExistsOperationCompleted);
        }
        this.InvokeAsync("FileExists", new object[] {
                    Path,
                    FileName}, this.FileExistsOperationCompleted, userState);
    }
    
    private void OnFileExistsOperationCompleted(object arg) {
        if ((this.FileExistsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.FileExistsCompleted(this, new FileExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Browse", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public FileInformation[] Browse(string VirtualPath, FileExtensions FileExtension) {
        object[] results = this.Invoke("Browse", new object[] {
                    VirtualPath,
                    FileExtension});
        return ((FileInformation[])(results[0]));
    }
    
    /// <remarks/>
    public void BrowseAsync(string VirtualPath, FileExtensions FileExtension) {
        this.BrowseAsync(VirtualPath, FileExtension, null);
    }
    
    /// <remarks/>
    public void BrowseAsync(string VirtualPath, FileExtensions FileExtension, object userState) {
        if ((this.BrowseOperationCompleted == null)) {
            this.BrowseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBrowseOperationCompleted);
        }
        this.InvokeAsync("Browse", new object[] {
                    VirtualPath,
                    FileExtension}, this.BrowseOperationCompleted, userState);
    }
    
    private void OnBrowseOperationCompleted(object arg) {
        if ((this.BrowseCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.BrowseCompleted(this, new BrowseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
    public byte[] GetFile(string VirtualPath, string FileName) {
        object[] results = this.Invoke("GetFile", new object[] {
                    VirtualPath,
                    FileName});
        return ((byte[])(results[0]));
    }
    
    /// <remarks/>
    public void GetFileAsync(string VirtualPath, string FileName) {
        this.GetFileAsync(VirtualPath, FileName, null);
    }
    
    /// <remarks/>
    public void GetFileAsync(string VirtualPath, string FileName, object userState) {
        if ((this.GetFileOperationCompleted == null)) {
            this.GetFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileOperationCompleted);
        }
        this.InvokeAsync("GetFile", new object[] {
                    VirtualPath,
                    FileName}, this.GetFileOperationCompleted, userState);
    }
    
    private void OnGetFileOperationCompleted(object arg) {
        if ((this.GetFileCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetFileCompleted(this, new GetFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBaseUrl", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GetBaseUrl() {
        object[] results = this.Invoke("GetBaseUrl", new object[0]);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetBaseUrlAsync() {
        this.GetBaseUrlAsync(null);
    }
    
    /// <remarks/>
    public void GetBaseUrlAsync(object userState) {
        if ((this.GetBaseUrlOperationCompleted == null)) {
            this.GetBaseUrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBaseUrlOperationCompleted);
        }
        this.InvokeAsync("GetBaseUrl", new object[0], this.GetBaseUrlOperationCompleted, userState);
    }
    
    private void OnGetBaseUrlOperationCompleted(object arg) {
        if ((this.GetBaseUrlCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetBaseUrlCompleted(this, new GetBaseUrlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateFolder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public int CreateFolder(int iUserId, int ProjectId, int sFolderId, string sPath) {
        object[] results = this.Invoke("CreateFolder", new object[] {
                    iUserId,
                    ProjectId,
                    sFolderId,
                    sPath});
        return ((int)(results[0]));
    }
    
    /// <remarks/>
    public void CreateFolderAsync(int iUserId, int ProjectId, int sFolderId, string sPath) {
        this.CreateFolderAsync(iUserId, ProjectId, sFolderId, sPath, null);
    }
    
    /// <remarks/>
    public void CreateFolderAsync(int iUserId, int ProjectId, int sFolderId, string sPath, object userState) {
        if ((this.CreateFolderOperationCompleted == null)) {
            this.CreateFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateFolderOperationCompleted);
        }
        this.InvokeAsync("CreateFolder", new object[] {
                    iUserId,
                    ProjectId,
                    sFolderId,
                    sPath}, this.CreateFolderOperationCompleted, userState);
    }
    
    private void OnCreateFolderOperationCompleted(object arg) {
        if ((this.CreateFolderCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CreateFolderCompleted(this, new CreateFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public int UploadFile(string VirtualPath, string Name, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] Content, int iUserId, int iFolderId, int iProjectId, int iPrevDocId, BasicDocumentInfo oDocInfo) {
        object[] results = this.Invoke("UploadFile", new object[] {
                    VirtualPath,
                    Name,
                    Content,
                    iUserId,
                    iFolderId,
                    iProjectId,
                    iPrevDocId,
                    oDocInfo});
        return ((int)(results[0]));
    }
    
    /// <remarks/>
    public void UploadFileAsync(string VirtualPath, string Name, byte[] Content, int iUserId, int iFolderId, int iProjectId, int iPrevDocId, BasicDocumentInfo oDocInfo) {
        this.UploadFileAsync(VirtualPath, Name, Content, iUserId, iFolderId, iProjectId, iPrevDocId, oDocInfo, null);
    }
    
    /// <remarks/>
    public void UploadFileAsync(string VirtualPath, string Name, byte[] Content, int iUserId, int iFolderId, int iProjectId, int iPrevDocId, BasicDocumentInfo oDocInfo, object userState) {
        if ((this.UploadFileOperationCompleted == null)) {
            this.UploadFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadFileOperationCompleted);
        }
        this.InvokeAsync("UploadFile", new object[] {
                    VirtualPath,
                    Name,
                    Content,
                    iUserId,
                    iFolderId,
                    iProjectId,
                    iPrevDocId,
                    oDocInfo}, this.UploadFileOperationCompleted, userState);
    }
    
    private void OnUploadFileOperationCompleted(object arg) {
        if ((this.UploadFileCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UploadFileCompleted(this, new UploadFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/StartUpload", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Guid StartUpload(string Name, long iFileSize, int iUserId, int iFolderId, int iProjectId, int iPrevDocId, BasicDocumentInfo oDocInfo) {
        object[] results = this.Invoke("StartUpload", new object[] {
                    Name,
                    iFileSize,
                    iUserId,
                    iFolderId,
                    iProjectId,
                    iPrevDocId,
                    oDocInfo});
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public void StartUploadAsync(string Name, long iFileSize, int iUserId, int iFolderId, int iProjectId, int iPrevDocId, BasicDocumentInfo oDocInfo) {
        this.StartUploadAsync(Name, iFileSize, iUserId, iFolderId, iProjectId, iPrevDocId, oDocInfo, null);
    }
    
    /// <remarks/>
    public void StartUploadAsync(string Name, long iFileSize, int iUserId, int iFolderId, int iProjectId, int iPrevDocId, BasicDocumentInfo oDocInfo, object userState) {
        if ((this.StartUploadOperationCompleted == null)) {
            this.StartUploadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartUploadOperationCompleted);
        }
        this.InvokeAsync("StartUpload", new object[] {
                    Name,
                    iFileSize,
                    iUserId,
                    iFolderId,
                    iProjectId,
                    iPrevDocId,
                    oDocInfo}, this.StartUploadOperationCompleted, userState);
    }
    
    private void OnStartUploadOperationCompleted(object arg) {
        if ((this.StartUploadCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.StartUploadCompleted(this, new StartUploadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public long UploadData(System.Guid oGuid, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] data, long iDataSize) {
        object[] results = this.Invoke("UploadData", new object[] {
                    oGuid,
                    data,
                    iDataSize});
        return ((long)(results[0]));
    }
    
    /// <remarks/>
    public void UploadDataAsync(System.Guid oGuid, byte[] data, long iDataSize) {
        this.UploadDataAsync(oGuid, data, iDataSize, null);
    }
    
    /// <remarks/>
    public void UploadDataAsync(System.Guid oGuid, byte[] data, long iDataSize, object userState) {
        if ((this.UploadDataOperationCompleted == null)) {
            this.UploadDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadDataOperationCompleted);
        }
        this.InvokeAsync("UploadData", new object[] {
                    oGuid,
                    data,
                    iDataSize}, this.UploadDataOperationCompleted, userState);
    }
    
    private void OnUploadDataOperationCompleted(object arg) {
        if ((this.UploadDataCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UploadDataCompleted(this, new UploadDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/StartDownload", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Guid StartDownload(int iDocumentId, int iUserId, int iProjectId, string sExtension) {
        object[] results = this.Invoke("StartDownload", new object[] {
                    iDocumentId,
                    iUserId,
                    iProjectId,
                    sExtension});
        return ((System.Guid)(results[0]));
    }
    
    /// <remarks/>
    public void StartDownloadAsync(int iDocumentId, int iUserId, int iProjectId, string sExtension) {
        this.StartDownloadAsync(iDocumentId, iUserId, iProjectId, sExtension, null);
    }
    
    /// <remarks/>
    public void StartDownloadAsync(int iDocumentId, int iUserId, int iProjectId, string sExtension, object userState) {
        if ((this.StartDownloadOperationCompleted == null)) {
            this.StartDownloadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartDownloadOperationCompleted);
        }
        this.InvokeAsync("StartDownload", new object[] {
                    iDocumentId,
                    iUserId,
                    iProjectId,
                    sExtension}, this.StartDownloadOperationCompleted, userState);
    }
    
    private void OnStartDownloadOperationCompleted(object arg) {
        if ((this.StartDownloadCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.StartDownloadCompleted(this, new StartDownloadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetExtensions", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string[] GetExtensions(int iDocumentId, int iProjectId) {
        object[] results = this.Invoke("GetExtensions", new object[] {
                    iDocumentId,
                    iProjectId});
        return ((string[])(results[0]));
    }
    
    /// <remarks/>
    public void GetExtensionsAsync(int iDocumentId, int iProjectId) {
        this.GetExtensionsAsync(iDocumentId, iProjectId, null);
    }
    
    /// <remarks/>
    public void GetExtensionsAsync(int iDocumentId, int iProjectId, object userState) {
        if ((this.GetExtensionsOperationCompleted == null)) {
            this.GetExtensionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExtensionsOperationCompleted);
        }
        this.InvokeAsync("GetExtensions", new object[] {
                    iDocumentId,
                    iProjectId}, this.GetExtensionsOperationCompleted, userState);
    }
    
    private void OnGetExtensionsOperationCompleted(object arg) {
        if ((this.GetExtensionsCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetExtensionsCompleted(this, new GetExtensionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFileName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GetFileName(System.Guid oGuid) {
        object[] results = this.Invoke("GetFileName", new object[] {
                    oGuid});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetFileNameAsync(System.Guid oGuid) {
        this.GetFileNameAsync(oGuid, null);
    }
    
    /// <remarks/>
    public void GetFileNameAsync(System.Guid oGuid, object userState) {
        if ((this.GetFileNameOperationCompleted == null)) {
            this.GetFileNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileNameOperationCompleted);
        }
        this.InvokeAsync("GetFileName", new object[] {
                    oGuid}, this.GetFileNameOperationCompleted, userState);
    }
    
    private void OnGetFileNameOperationCompleted(object arg) {
        if ((this.GetFileNameCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetFileNameCompleted(this, new GetFileNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFileSize", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public long GetFileSize(System.Guid oGuid) {
        object[] results = this.Invoke("GetFileSize", new object[] {
                    oGuid});
        return ((long)(results[0]));
    }
    
    /// <remarks/>
    public void GetFileSizeAsync(System.Guid oGuid) {
        this.GetFileSizeAsync(oGuid, null);
    }
    
    /// <remarks/>
    public void GetFileSizeAsync(System.Guid oGuid, object userState) {
        if ((this.GetFileSizeOperationCompleted == null)) {
            this.GetFileSizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileSizeOperationCompleted);
        }
        this.InvokeAsync("GetFileSize", new object[] {
                    oGuid}, this.GetFileSizeOperationCompleted, userState);
    }
    
    private void OnGetFileSizeOperationCompleted(object arg) {
        if ((this.GetFileSizeCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetFileSizeCompleted(this, new GetFileSizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DownloadData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
    public byte[] DownloadData(System.Guid oGuid) {
        object[] results = this.Invoke("DownloadData", new object[] {
                    oGuid});
        return ((byte[])(results[0]));
    }
    
    /// <remarks/>
    public void DownloadDataAsync(System.Guid oGuid) {
        this.DownloadDataAsync(oGuid, null);
    }
    
    /// <remarks/>
    public void DownloadDataAsync(System.Guid oGuid, object userState) {
        if ((this.DownloadDataOperationCompleted == null)) {
            this.DownloadDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadDataOperationCompleted);
        }
        this.InvokeAsync("DownloadData", new object[] {
                    oGuid}, this.DownloadDataOperationCompleted, userState);
    }
    
    private void OnDownloadDataOperationCompleted(object arg) {
        if ((this.DownloadDataCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DownloadDataCompleted(this, new DownloadDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AbortTransfer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void AbortTransfer(System.Guid oGuid, bool bDoDelete) {
        this.Invoke("AbortTransfer", new object[] {
                    oGuid,
                    bDoDelete});
    }
    
    /// <remarks/>
    public void AbortTransferAsync(System.Guid oGuid, bool bDoDelete) {
        this.AbortTransferAsync(oGuid, bDoDelete, null);
    }
    
    /// <remarks/>
    public void AbortTransferAsync(System.Guid oGuid, bool bDoDelete, object userState) {
        if ((this.AbortTransferOperationCompleted == null)) {
            this.AbortTransferOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAbortTransferOperationCompleted);
        }
        this.InvokeAsync("AbortTransfer", new object[] {
                    oGuid,
                    bDoDelete}, this.AbortTransferOperationCompleted, userState);
    }
    
    private void OnAbortTransferOperationCompleted(object arg) {
        if ((this.AbortTransferCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.AbortTransferCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckVersion_Service", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string CheckVersion_Service(string Pages) {
        object[] results = this.Invoke("CheckVersion_Service", new object[] {
                    Pages});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void CheckVersion_ServiceAsync(string Pages) {
        this.CheckVersion_ServiceAsync(Pages, null);
    }
    
    /// <remarks/>
    public void CheckVersion_ServiceAsync(string Pages, object userState) {
        if ((this.CheckVersion_ServiceOperationCompleted == null)) {
            this.CheckVersion_ServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckVersion_ServiceOperationCompleted);
        }
        this.InvokeAsync("CheckVersion_Service", new object[] {
                    Pages}, this.CheckVersion_ServiceOperationCompleted, userState);
    }
    
    private void OnCheckVersion_ServiceOperationCompleted(object arg) {
        if ((this.CheckVersion_ServiceCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.CheckVersion_ServiceCompleted(this, new CheckVersion_ServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetLicenseInfo_Service", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string SetLicenseInfo_Service(string Version, long InstallNo, string Company, string Username, string Usermail, string Page) {
        object[] results = this.Invoke("SetLicenseInfo_Service", new object[] {
                    Version,
                    InstallNo,
                    Company,
                    Username,
                    Usermail,
                    Page});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void SetLicenseInfo_ServiceAsync(string Version, long InstallNo, string Company, string Username, string Usermail, string Page) {
        this.SetLicenseInfo_ServiceAsync(Version, InstallNo, Company, Username, Usermail, Page, null);
    }
    
    /// <remarks/>
    public void SetLicenseInfo_ServiceAsync(string Version, long InstallNo, string Company, string Username, string Usermail, string Page, object userState) {
        if ((this.SetLicenseInfo_ServiceOperationCompleted == null)) {
            this.SetLicenseInfo_ServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetLicenseInfo_ServiceOperationCompleted);
        }
        this.InvokeAsync("SetLicenseInfo_Service", new object[] {
                    Version,
                    InstallNo,
                    Company,
                    Username,
                    Usermail,
                    Page}, this.SetLicenseInfo_ServiceOperationCompleted, userState);
    }
    
    private void OnSetLicenseInfo_ServiceOperationCompleted(object arg) {
        if ((this.SetLicenseInfo_ServiceCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.SetLicenseInfo_ServiceCompleted(this, new SetLicenseInfo_ServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLicenseNo_Service", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GetLicenseNo_Service(long InstallNo, string Page) {
        object[] results = this.Invoke("GetLicenseNo_Service", new object[] {
                    InstallNo,
                    Page});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetLicenseNo_ServiceAsync(long InstallNo, string Page) {
        this.GetLicenseNo_ServiceAsync(InstallNo, Page, null);
    }
    
    /// <remarks/>
    public void GetLicenseNo_ServiceAsync(long InstallNo, string Page, object userState) {
        if ((this.GetLicenseNo_ServiceOperationCompleted == null)) {
            this.GetLicenseNo_ServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLicenseNo_ServiceOperationCompleted);
        }
        this.InvokeAsync("GetLicenseNo_Service", new object[] {
                    InstallNo,
                    Page}, this.GetLicenseNo_ServiceOperationCompleted, userState);
    }
    
    private void OnGetLicenseNo_ServiceOperationCompleted(object arg) {
        if ((this.GetLicenseNo_ServiceCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetLicenseNo_ServiceCompleted(this, new GetLicenseNo_ServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/OpenDotNetNuke", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string OpenDotNetNuke(string sEmail, string sUsername) {
        object[] results = this.Invoke("OpenDotNetNuke", new object[] {
                    sEmail,
                    sUsername});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void OpenDotNetNukeAsync(string sEmail, string sUsername) {
        this.OpenDotNetNukeAsync(sEmail, sUsername, null);
    }
    
    /// <remarks/>
    public void OpenDotNetNukeAsync(string sEmail, string sUsername, object userState) {
        if ((this.OpenDotNetNukeOperationCompleted == null)) {
            this.OpenDotNetNukeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOpenDotNetNukeOperationCompleted);
        }
        this.InvokeAsync("OpenDotNetNuke", new object[] {
                    sEmail,
                    sUsername}, this.OpenDotNetNukeOperationCompleted, userState);
    }
    
    private void OnOpenDotNetNukeOperationCompleted(object arg) {
        if ((this.OpenDotNetNukeCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.OpenDotNetNukeCompleted(this, new OpenDotNetNukeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsNetworkLicense", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string IsNetworkLicense(int iInstallNo, string sUserMail) {
        object[] results = this.Invoke("IsNetworkLicense", new object[] {
                    iInstallNo,
                    sUserMail});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void IsNetworkLicenseAsync(int iInstallNo, string sUserMail) {
        this.IsNetworkLicenseAsync(iInstallNo, sUserMail, null);
    }
    
    /// <remarks/>
    public void IsNetworkLicenseAsync(int iInstallNo, string sUserMail, object userState) {
        if ((this.IsNetworkLicenseOperationCompleted == null)) {
            this.IsNetworkLicenseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsNetworkLicenseOperationCompleted);
        }
        this.InvokeAsync("IsNetworkLicense", new object[] {
                    iInstallNo,
                    sUserMail}, this.IsNetworkLicenseOperationCompleted, userState);
    }
    
    private void OnIsNetworkLicenseOperationCompleted(object arg) {
        if ((this.IsNetworkLicenseCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.IsNetworkLicenseCompleted(this, new IsNetworkLicenseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLicenseFromPool", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GetLicenseFromPool(int iInstallNo, string sUserMail) {
        object[] results = this.Invoke("GetLicenseFromPool", new object[] {
                    iInstallNo,
                    sUserMail});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void GetLicenseFromPoolAsync(int iInstallNo, string sUserMail) {
        this.GetLicenseFromPoolAsync(iInstallNo, sUserMail, null);
    }
    
    /// <remarks/>
    public void GetLicenseFromPoolAsync(int iInstallNo, string sUserMail, object userState) {
        if ((this.GetLicenseFromPoolOperationCompleted == null)) {
            this.GetLicenseFromPoolOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLicenseFromPoolOperationCompleted);
        }
        this.InvokeAsync("GetLicenseFromPool", new object[] {
                    iInstallNo,
                    sUserMail}, this.GetLicenseFromPoolOperationCompleted, userState);
    }
    
    private void OnGetLicenseFromPoolOperationCompleted(object arg) {
        if ((this.GetLicenseFromPoolCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetLicenseFromPoolCompleted(this, new GetLicenseFromPoolCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PutLicenseToPool", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string PutLicenseToPool(int iInstallNo, string sUserMail) {
        object[] results = this.Invoke("PutLicenseToPool", new object[] {
                    iInstallNo,
                    sUserMail});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void PutLicenseToPoolAsync(int iInstallNo, string sUserMail) {
        this.PutLicenseToPoolAsync(iInstallNo, sUserMail, null);
    }
    
    /// <remarks/>
    public void PutLicenseToPoolAsync(int iInstallNo, string sUserMail, object userState) {
        if ((this.PutLicenseToPoolOperationCompleted == null)) {
            this.PutLicenseToPoolOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPutLicenseToPoolOperationCompleted);
        }
        this.InvokeAsync("PutLicenseToPool", new object[] {
                    iInstallNo,
                    sUserMail}, this.PutLicenseToPoolOperationCompleted, userState);
    }
    
    private void OnPutLicenseToPoolOperationCompleted(object arg) {
        if ((this.PutLicenseToPoolCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.PutLicenseToPoolCompleted(this, new PutLicenseToPoolCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoggingService", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void LoggingService(int iInstallNo, string sLogAction) {
        this.Invoke("LoggingService", new object[] {
                    iInstallNo,
                    sLogAction});
    }
    
    /// <remarks/>
    public void LoggingServiceAsync(int iInstallNo, string sLogAction) {
        this.LoggingServiceAsync(iInstallNo, sLogAction, null);
    }
    
    /// <remarks/>
    public void LoggingServiceAsync(int iInstallNo, string sLogAction, object userState) {
        if ((this.LoggingServiceOperationCompleted == null)) {
            this.LoggingServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoggingServiceOperationCompleted);
        }
        this.InvokeAsync("LoggingService", new object[] {
                    iInstallNo,
                    sLogAction}, this.LoggingServiceOperationCompleted, userState);
    }
    
    private void OnLoggingServiceOperationCompleted(object arg) {
        if ((this.LoggingServiceCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.LoggingServiceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
public partial class BasicDocumentInfo {
    
    private object sTitleField;
    
    private object sDescriptionField;
    
    private object sSubject1Field;
    
    private object sSubject2Field;
    
    private object sProjectNumberField;
    
    private object sClientField;
    
    private object iStatusField;
    
    private object dDocumentDateField;
    
    private object sResponsibleInitField;
    
    private object sResponsibleNameField;
    
    private object sResponsibleCompanyField;
    
    private object sRevisionField;
    
    private object dRevisionDateField;
    
    private object sRevisionSubject1Field;
    
    private object sRevisionSubject2Field;
    
    private object sCopyrightField;
    
    private object sUseField;
    
    private object sArchiveField;
    
    private object sPerformedByField;
    
    private object dPerformedDateField;
    
    private object sCheckedByField;
    
    private object dCheckedDateField;
    
    private object iApprovedStageField;
    
    private object sApprovedByField;
    
    private object dApprovedDateField;
    
    /// <remarks/>
    public object sTitle {
        get {
            return this.sTitleField;
        }
        set {
            this.sTitleField = value;
        }
    }
    
    /// <remarks/>
    public object sDescription {
        get {
            return this.sDescriptionField;
        }
        set {
            this.sDescriptionField = value;
        }
    }
    
    /// <remarks/>
    public object sSubject1 {
        get {
            return this.sSubject1Field;
        }
        set {
            this.sSubject1Field = value;
        }
    }
    
    /// <remarks/>
    public object sSubject2 {
        get {
            return this.sSubject2Field;
        }
        set {
            this.sSubject2Field = value;
        }
    }
    
    /// <remarks/>
    public object sProjectNumber {
        get {
            return this.sProjectNumberField;
        }
        set {
            this.sProjectNumberField = value;
        }
    }
    
    /// <remarks/>
    public object sClient {
        get {
            return this.sClientField;
        }
        set {
            this.sClientField = value;
        }
    }
    
    /// <remarks/>
    public object iStatus {
        get {
            return this.iStatusField;
        }
        set {
            this.iStatusField = value;
        }
    }
    
    /// <remarks/>
    public object dDocumentDate {
        get {
            return this.dDocumentDateField;
        }
        set {
            this.dDocumentDateField = value;
        }
    }
    
    /// <remarks/>
    public object sResponsibleInit {
        get {
            return this.sResponsibleInitField;
        }
        set {
            this.sResponsibleInitField = value;
        }
    }
    
    /// <remarks/>
    public object sResponsibleName {
        get {
            return this.sResponsibleNameField;
        }
        set {
            this.sResponsibleNameField = value;
        }
    }
    
    /// <remarks/>
    public object sResponsibleCompany {
        get {
            return this.sResponsibleCompanyField;
        }
        set {
            this.sResponsibleCompanyField = value;
        }
    }
    
    /// <remarks/>
    public object sRevision {
        get {
            return this.sRevisionField;
        }
        set {
            this.sRevisionField = value;
        }
    }
    
    /// <remarks/>
    public object dRevisionDate {
        get {
            return this.dRevisionDateField;
        }
        set {
            this.dRevisionDateField = value;
        }
    }
    
    /// <remarks/>
    public object sRevisionSubject1 {
        get {
            return this.sRevisionSubject1Field;
        }
        set {
            this.sRevisionSubject1Field = value;
        }
    }
    
    /// <remarks/>
    public object sRevisionSubject2 {
        get {
            return this.sRevisionSubject2Field;
        }
        set {
            this.sRevisionSubject2Field = value;
        }
    }
    
    /// <remarks/>
    public object sCopyright {
        get {
            return this.sCopyrightField;
        }
        set {
            this.sCopyrightField = value;
        }
    }
    
    /// <remarks/>
    public object sUse {
        get {
            return this.sUseField;
        }
        set {
            this.sUseField = value;
        }
    }
    
    /// <remarks/>
    public object sArchive {
        get {
            return this.sArchiveField;
        }
        set {
            this.sArchiveField = value;
        }
    }
    
    /// <remarks/>
    public object sPerformedBy {
        get {
            return this.sPerformedByField;
        }
        set {
            this.sPerformedByField = value;
        }
    }
    
    /// <remarks/>
    public object dPerformedDate {
        get {
            return this.dPerformedDateField;
        }
        set {
            this.dPerformedDateField = value;
        }
    }
    
    /// <remarks/>
    public object sCheckedBy {
        get {
            return this.sCheckedByField;
        }
        set {
            this.sCheckedByField = value;
        }
    }
    
    /// <remarks/>
    public object dCheckedDate {
        get {
            return this.dCheckedDateField;
        }
        set {
            this.dCheckedDateField = value;
        }
    }
    
    /// <remarks/>
    public object iApprovedStage {
        get {
            return this.iApprovedStageField;
        }
        set {
            this.iApprovedStageField = value;
        }
    }
    
    /// <remarks/>
    public object sApprovedBy {
        get {
            return this.sApprovedByField;
        }
        set {
            this.sApprovedByField = value;
        }
    }
    
    /// <remarks/>
    public object dApprovedDate {
        get {
            return this.dApprovedDateField;
        }
        set {
            this.dApprovedDateField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
public partial class FileInformation {
    
    private string nameField;
    
    private long sizeField;
    
    private System.DateTime creadedDateField;
    
    private System.DateTime lastModifiedField;
    
    private System.DateTime lastAccessField;
    
    private string fileTypeField;
    
    private string fileLocationField;
    
    private byte[] fileContentField;
    
    /// <remarks/>
    public string Name {
        get {
            return this.nameField;
        }
        set {
            this.nameField = value;
        }
    }
    
    /// <remarks/>
    public long Size {
        get {
            return this.sizeField;
        }
        set {
            this.sizeField = value;
        }
    }
    
    /// <remarks/>
    public System.DateTime CreadedDate {
        get {
            return this.creadedDateField;
        }
        set {
            this.creadedDateField = value;
        }
    }
    
    /// <remarks/>
    public System.DateTime LastModified {
        get {
            return this.lastModifiedField;
        }
        set {
            this.lastModifiedField = value;
        }
    }
    
    /// <remarks/>
    public System.DateTime LastAccess {
        get {
            return this.lastAccessField;
        }
        set {
            this.lastAccessField = value;
        }
    }
    
    /// <remarks/>
    public string FileType {
        get {
            return this.fileTypeField;
        }
        set {
            this.fileTypeField = value;
        }
    }
    
    /// <remarks/>
    public string FileLocation {
        get {
            return this.fileLocationField;
        }
        set {
            this.fileLocationField = value;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
    public byte[] FileContent {
        get {
            return this.fileContentField;
        }
        set {
            this.fileContentField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
[System.SerializableAttribute()]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
public enum FileExtensions {
    
    /// <remarks/>
    htm,
    
    /// <remarks/>
    html,
    
    /// <remarks/>
    asp,
    
    /// <remarks/>
    aspx,
    
    /// <remarks/>
    jpg,
    
    /// <remarks/>
    gif,
    
    /// <remarks/>
    dll,
    
    /// <remarks/>
    exe,
    
    /// <remarks/>
    all,
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
public delegate void GetDBListCompletedEventHandler(object sender, GetDBListCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetDBListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetDBListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
public delegate void GetDSCompletedEventHandler(object sender, GetDSCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetDSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetDSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string ErrMessage {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
public delegate void GetDS2CompletedEventHandler(object sender, GetDS2CompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetDS2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetDS2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string ErrMessage {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
public delegate void PutDSCompletedEventHandler(object sender, PutDSCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class PutDSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal PutDSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string ErrMessage {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
    
    /// <remarks/>
    public int[] ReturnIdentity {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int[])(this.results[2]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
public delegate void PutDS2CompletedEventHandler(object sender, PutDS2CompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class PutDS2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal PutDS2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string ErrMessage {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
    
    /// <remarks/>
    public int[] ReturnIdentity {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int[])(this.results[2]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
public delegate void PutAndGetDSCompletedEventHandler(object sender, PutAndGetDSCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class PutAndGetDSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal PutAndGetDSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string ErrMessage {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
public delegate void ExecuteSQLCompletedEventHandler(object sender, ExecuteSQLCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ExecuteSQLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ExecuteSQLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public object Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((object)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string ErrMessage {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
public delegate void ExecuteSQL2CompletedEventHandler(object sender, ExecuteSQL2CompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class ExecuteSQL2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ExecuteSQL2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public object Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((object)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string ErrMessage {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
public delegate void GetValCompletedEventHandler(object sender, GetValCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetValCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetValCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public object Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((object)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string ErrMessage {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
public delegate void GetVal2CompletedEventHandler(object sender, GetVal2CompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetVal2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetVal2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public object Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((object)(this.results[0]));
        }
    }
    
    /// <remarks/>
    public string ErrMessage {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[1]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
public delegate void DirectoryExistsCompletedEventHandler(object sender, DirectoryExistsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class DirectoryExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal DirectoryExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
public delegate void FileExistsCompletedEventHandler(object sender, FileExistsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class FileExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal FileExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
public delegate void BrowseCompletedEventHandler(object sender, BrowseCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class BrowseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal BrowseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public FileInformation[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((FileInformation[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
public delegate void GetFileCompletedEventHandler(object sender, GetFileCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public byte[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((byte[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
public delegate void GetBaseUrlCompletedEventHandler(object sender, GetBaseUrlCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetBaseUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetBaseUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
public delegate void CreateFolderCompletedEventHandler(object sender, CreateFolderCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CreateFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CreateFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
public delegate void UploadFileCompletedEventHandler(object sender, UploadFileCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class UploadFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UploadFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public int Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((int)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
public delegate void StartUploadCompletedEventHandler(object sender, StartUploadCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class StartUploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal StartUploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Guid Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Guid)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
public delegate void UploadDataCompletedEventHandler(object sender, UploadDataCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class UploadDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UploadDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public long Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((long)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
public delegate void StartDownloadCompletedEventHandler(object sender, StartDownloadCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class StartDownloadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal StartDownloadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Guid Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Guid)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
public delegate void GetExtensionsCompletedEventHandler(object sender, GetExtensionsCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetExtensionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetExtensionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
public delegate void GetFileNameCompletedEventHandler(object sender, GetFileNameCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetFileNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetFileNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
public delegate void GetFileSizeCompletedEventHandler(object sender, GetFileSizeCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetFileSizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetFileSizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public long Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((long)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
public delegate void DownloadDataCompletedEventHandler(object sender, DownloadDataCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class DownloadDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal DownloadDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public byte[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((byte[])(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
public delegate void AbortTransferCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
public delegate void CheckVersion_ServiceCompletedEventHandler(object sender, CheckVersion_ServiceCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class CheckVersion_ServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal CheckVersion_ServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
public delegate void SetLicenseInfo_ServiceCompletedEventHandler(object sender, SetLicenseInfo_ServiceCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class SetLicenseInfo_ServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal SetLicenseInfo_ServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
public delegate void GetLicenseNo_ServiceCompletedEventHandler(object sender, GetLicenseNo_ServiceCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetLicenseNo_ServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetLicenseNo_ServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
public delegate void OpenDotNetNukeCompletedEventHandler(object sender, OpenDotNetNukeCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class OpenDotNetNukeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal OpenDotNetNukeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
public delegate void IsNetworkLicenseCompletedEventHandler(object sender, IsNetworkLicenseCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class IsNetworkLicenseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal IsNetworkLicenseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
public delegate void GetLicenseFromPoolCompletedEventHandler(object sender, GetLicenseFromPoolCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetLicenseFromPoolCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetLicenseFromPoolCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
public delegate void PutLicenseToPoolCompletedEventHandler(object sender, PutLicenseToPoolCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class PutLicenseToPoolCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal PutLicenseToPoolCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "0.0.0.0")]
public delegate void LoggingServiceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
